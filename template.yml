#
# Copyright (c) 2018 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This file contains an OpenShift template that creates all the objects needed
# for a working installation of the application. See the `template.sh` file for
# an example of how to use it.

---

apiVersion: v1
kind: Template
metadata:
  name: dedicated-portal
  annotations:
    description: "Dedicated Portal"

parameters:

- name: NAMESPACE
  description: The namespace where the objects will be created.
  value: dedicated-portal

- name: VERSION
  description: The version number of the project.
  value: latest

- name: DOMAIN
  description: The DNS domain where the routes will be created.
  value: example.com

- name: PASSWORD
  description: Password for the database user.

objects:

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: messaging-config
  data:

    artemis-roles.properties: |-
      admins=admin
      services=clusters-service,customers-service

    artemis-users.properties: |-
      admin=${PASSWORD}
      clusters-service=${PASSWORD}
      customers-service=${PASSWORD}

    bootstrap.xml: |-
      <?xml version="1.0" encoding="UTF-8" standalone="yes"?>

      <broker
        xmlns="http://activemq.org/schema">

        <!-- Authentication domain: -->
        <jaas-security domain="activemq"/>

        <!-- Broker configuration: -->
        <server configuration="file:/var/lib/artemis/etc/broker.xml"/>

        <!-- Console configuration: -->
        <web
          bind="https://0.0.0.0:8161"
          path="web"
          keyStorePath="/var/lib/artemis/etc/console.p12"
          keyStorePassword="">

          <app url="activemq-branding" war="activemq-branding.war"/>
          <app url="artemis-plugin" war="artemis-plugin.war"/>
          <app url="console" war="console.war"/>

        </web>
      </broker>

    broker.xml: |-
      <?xml version="1.0" encoding="UTF-8" standalone="yes"?>

      <configuration
        xmlns="urn:activemq"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:xi="http://www.w3.org/2001/XInclude"
        xsi:schemaLocation="urn:activemq /schema/artemis-configuration.xsd">

        <core
          xmlns="urn:activemq:core"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="urn:activemq:core ">

          <name>artemis</name>

          <persistence-enabled>true</persistence-enabled>
          <journal-type>ASYNCIO</journal-type>
          <paging-directory>data/paging</paging-directory>
          <bindings-directory>data/bindings</bindings-directory>
          <journal-directory>data/journal</journal-directory>
          <large-messages-directory>data/large-messages</large-messages-directory>
          <journal-datasync>true</journal-datasync>
          <journal-min-files>2</journal-min-files>
          <journal-pool-files>10</journal-pool-files>
          <journal-file-size>10M</journal-file-size>
          <disk-scan-period>5000</disk-scan-period>
          <max-disk-usage>90</max-disk-usage>
          <critical-analyzer>true</critical-analyzer>
          <critical-analyzer-timeout>120000</critical-analyzer-timeout>
          <critical-analyzer-check-period>60000</critical-analyzer-check-period>
          <critical-analyzer-policy>HALT</critical-analyzer-policy>

          <acceptors>
            <acceptor name="core">tcp://0.0.0.0:61616?tcpSendBufferSize=1048576;tcpReceiveBufferSize=1048576;protocols=CORE;useEpoll=true;sslEnabled=true;keyStorePath=/var/lib/artemis/etc/acceptors.p12;keyStorePassword=</acceptor>
            <acceptor name="stomp">tcp://0.0.0.0:61613?tcpSendBufferSize=1048576;tcpReceiveBufferSize=1048576;protocols=STOMP;useEpoll=true;sslEnabled=true;keyStorePath=/var/lib/artemis/etc/acceptors.p12;keyStorePassword=</acceptor>
          </acceptors>

          <security-settings>
            <security-setting match="#">
              <permission type="createNonDurableQueue" roles="admins"/>
              <permission type="deleteNonDurableQueue" roles="admins"/>
              <permission type="createDurableQueue" roles="admins"/>
              <permission type="deleteDurableQueue" roles="admins"/>
              <permission type="createAddress" roles="admins"/>
              <permission type="deleteAddress" roles="admins"/>
              <permission type="consume" roles="admins,services"/>
              <permission type="browse" roles="admins,services"/>
              <permission type="send" roles="admins,services"/>
              <permission type="manage" roles="admins,services"/>
            </security-setting>
          </security-settings>

          <address-settings>

            <address-setting match="activemq.management#">
              <address-full-policy>PAGE</address-full-policy>
              <auto-create-addresses>true</auto-create-addresses>
              <auto-create-jms-queues>true</auto-create-jms-queues>
              <auto-create-jms-topics>true</auto-create-jms-topics>
              <auto-create-queues>true</auto-create-queues>
              <dead-letter-address>dlq</dead-letter-address>
              <expiry-address>expiry</expiry-address>
              <max-size-bytes>-1</max-size-bytes>
              <message-counter-history-day-limit>10</message-counter-history-day-limit>
              <redelivery-delay>0</redelivery-delay>
            </address-setting>

            <address-setting match="#">
              <address-full-policy>PAGE</address-full-policy>
              <auto-create-addresses>false</auto-create-addresses>
              <auto-create-jms-queues>false</auto-create-jms-queues>
              <auto-create-jms-topics>false</auto-create-jms-topics>
              <auto-create-queues>false</auto-create-queues>
              <dead-letter-address>dlq</dead-letter-address>
              <expiry-address>expiry</expiry-address>
              <max-size-bytes>-1</max-size-bytes>
              <message-counter-history-day-limit>10</message-counter-history-day-limit>
              <redelivery-delay>0</redelivery-delay>
            </address-setting>

          </address-settings>

          <addresses>

            <address name="dlq">
              <anycast>
                <queue name="dlq"/>
              </anycast>
            </address>

            <address name="expiry">
              <anycast>
                <queue name="expiry"/>
              </anycast>
            </address>

            <address name="clusters.service">
              <anycast>
                <queue name="clusters.service"/>
              </anycast>
            </address>

            <address name="customers.service">
              <anycast>
                <queue name="customers.service"/>
              </anycast>
            </address>

            <address name="clusters.notifications">
              <multicast>
                <queue name="clusters.notifications"/>
              </multicast>
            </address>

          </addresses>

          <broker-plugins>
            <broker-plugin class-name="org.apache.activemq.artemis.core.server.plugin.impl.LoggingActiveMQServerPlugin">
              <property key="LOG_ALL_EVENTS" value="true"/>
              <property key="LOG_CONNECTION_EVENTS" value="true"/>
              <property key="LOG_SESSION_EVENTS" value="true"/>
              <property key="LOG_CONSUMER_EVENTS" value="true"/>
              <property key="LOG_DELIVERING_EVENTS" value="true"/>
              <property key="LOG_SENDING_EVENTS" value="true"/>
              <property key="LOG_INTERNAL_EVENTS" value="true"/>
            </broker-plugin>
          </broker-plugins>

        </core>

      </configuration>

    jolokia-access.xml: |-
      <?xml version='1.0' encoding="UTF-8" standalone="yes"?>

      <restrict>
        <cors>
          <allow-origin>*://messaging-console.${DOMAIN}*</allow-origin>
          <strict-checking/>
        </cors>
      </restrict>

    logging.properties: |-
      loggers=\
      org.apache.activemq.artemis.core.server,\
      org.apache.activemq.artemis.integration.bootstrap,\
      org.apache.activemq.artemis.jms.server,\
      org.apache.activemq.artemis.journal,\
      org.apache.activemq.artemis.utils,\
      org.eclipse.jetty,\
      org.jboss.logging

      logger.level=INFO
      logger.org.apache.activemq.artemis.core.server.level=INFO
      logger.org.apache.activemq.artemis.journal.level=INFO
      logger.org.apache.activemq.artemis.utils.level=INFO
      logger.org.apache.activemq.artemis.jms.level=INFO
      logger.org.apache.activemq.artemis.integration.bootstrap.level=INFO
      logger.org.eclipse.jetty.level=WARN
      logger.handlers=CONSOLE

      handler.CONSOLE=org.jboss.logmanager.handlers.ConsoleHandler
      handler.CONSOLE.properties=autoFlush
      handler.CONSOLE.level=DEBUG
      handler.CONSOLE.autoFlush=true
      handler.CONSOLE.formatter=PATTERN

      formatter.PATTERN=org.jboss.logmanager.formatters.PatternFormatter
      formatter.PATTERN.properties=pattern
      formatter.PATTERN.pattern=%d %-5p [%c] %s%E%n

    login.config: |-
      activemq {
        org.apache.activemq.artemis.spi.core.security.jaas.PropertiesLoginModule sufficient
          debug=false
          reload=true
          org.apache.activemq.jaas.properties.user="artemis-users.properties"
          org.apache.activemq.jaas.properties.role="artemis-roles.properties";
      };

    management.xml: |-
      <?xml version="1.0" encoding="UTF-8" standalone="yes"?>

      <management-context
        xmlns="http://activemq.org/schema">

        <authorisation>
          <whitelist>
            <entry domain="hawtio"/>
          </whitelist>
          <default-access>
            <access method="list*" roles="admins"/>
            <access method="get*" roles="admins"/>
            <access method="is*" roles="admins"/>
            <access method="set*" roles="admins"/>
            <access method="*" roles="admins"/>
          </default-access>
          <role-access>
            <match domain="org.apache.activemq.artemis">
              <access method="list*" roles="admins"/>
              <access method="get*" roles="admins"/>
              <access method="is*" roles="admins"/>
              <access method="set*" roles="admins"/>
              <access method="*" roles="admins"/>
            </match>
          </role-access>
        </authorisation>

      </management-context>

- apiVersion: apps/v1beta1
  kind: Deployment
  metadata:
    name: messaging-service
    labels:
      app: messaging-service
  spec:
    selector:
      matchLabels:
        app: messaging-service
    replicas: 1
    template:
      metadata:
        labels:
          app: messaging-service
      spec:
        volumes:
        - name: config
          configMap:
            name: messaging-config
        - name: tls
          secret:
            secretName: messaging-tls
        - name: data
          emptyDir: {}
        containers:
        - name: service
          image: dedicated-portal/messaging-service:${VERSION}
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - name: config
            mountPath: /etc/artemis
          - name: tls
            mountPath: /etc/pki/tls/artemis
          - name: data
            mountPath: /var/lib/artemis
          args:
          - --home=/usr/share/artemis
          - --config=/etc/artemis
          - --instance=/var/lib/artemis
          - --console-cert=/etc/pki/tls/artemis/tls.crt
          - --console-key=/etc/pki/tls/artemis/tls.key
          - --console-keystore=/var/lib/artemis/etc/console.p12
          - --acceptors-cert=/etc/pki/tls/artemis/tls.crt
          - --acceptors-key=/etc/pki/tls/artemis/tls.key
          - --acceptors-keystore=/var/lib/artemis/etc/acceptors.p12

- apiVersion: v1
  kind: Service
  metadata:
    name: messaging-service
    labels:
      app: messaging-service
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: messaging-tls
  spec:
    selector:
      app: messaging-service
    ports:
    - name: console
      port: 8161
      targetPort: 8161
    - name: acceptor
      port: 61613
      targetPort: 61613

- apiVersion: v1
  kind: Route
  metadata:
    name: messaging-console
  spec:
    host: messaging-console.${DOMAIN}
    to:
      kind: Service
      name: messaging-service
    port:
      targetPort: console
    tls:
      termination: passthrough

- apiVersion: v1
  kind: Route
  metadata:
    name: messaging-service
  spec:
    host: messaging-service.${DOMAIN}
    to:
      kind: Service
      name: messaging-service
    port:
      targetPort: acceptor
    tls:
      termination: passthrough
- apiVersion: apps/v1beta1
  kind: Deployment
  metadata:
    name: clusters-service
    labels:
      app: clusters-service
  spec:
    selector:
      matchLabels:
        app: clusters-service
    replicas: 1
    template:
      metadata:
        labels:
          app: clusters-service
      spec:
        containers:
        - name: service
          image: dedicated-portal/clusters-service:${VERSION}
          imagePullPolicy: IfNotPresent
          command:
          - /usr/local/bin/clusters-service
          ports:
          - containerPort: 8000
            name: clusters-svc
        - name: postgresql
          image: centos/postgresql-94-centos7
          imagePullPolicy: IfNotPresent
          env:
          - name: POSTGRESQL_DATABASE
            value: clusters
          - name: POSTGRESQL_USER
            value: service
          - name: POSTGRESQL_PASSWORD
            value: ${PASSWORD}
          ports:
          - containerPort: 5432
            protocol: TCP
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: data
        volumes:
        - emptyDir: {}
          name: data
- apiVersion: v1
  kind: Service
  metadata:
    name: clusters-service
    labels:
      app: clusters-service
  spec:
    selector:
      app: clusters-service
    ports:
    - port: 8000
      targetPort: 8000

- apiVersion: v1
  kind: Route
  metadata:
    name: clusters-service
  spec:
    host: clusters-service.${DOMAIN}
    to:
      kind: Service
      name: clusters-service

- apiVersion: apps/v1beta1
  kind: Deployment
  metadata:
    name: customers-db
    labels:
      app: customers-db
  spec:
    selector:
      matchLabels:
        app: customers-db
    replicas: 1
    template:
      metadata:
        labels:
          app: customers-db
      spec:
        volumes:
        - name: data
          emptyDir: {}
        containers:
        - name: etcd
          image: quay.io/coreos/etcd:v3.1.11
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - name: data
            mountPath: /var/lib/etcd
          command:
          - /usr/local/bin/etcd
          - --data-dir=/var/lib/etcd
          - --listen-client-urls=http://0.0.0.0:2379
          - --advertise-client-urls=http://customers-db.${NAMESPACE}.svc.cluster.local:2379

- apiVersion: v1
  kind: Service
  metadata:
    name: customers-db
    labels:
      app: customers-db
  spec:
    selector:
      app: customers-db
    ports:
    - port: 2379
      targetPort: 2379

- apiVersion: apps/v1beta1
  kind: Deployment
  metadata:
    name: customers-service
    labels:
      app: customers-service
  spec:
    selector:
      matchLabels:
        app: customers-service
    replicas: 1
    template:
      metadata:
        labels:
          app: customers-service
      spec:
        containers:
        - name: service
          image: dedicated-portal/customers-service:${VERSION}
          imagePullPolicy: IfNotPresent

- apiVersion: v1
  kind: Service
  metadata:
    name: customers-service
    labels:
      app: customers-service
  spec:
    selector:
      app: customers-service
    ports:
    - port: 8000
      targetPort: 8000

- apiVersion: v1
  kind: Route
  metadata:
    name: customers-service
  spec:
    host: customers-service.${DOMAIN}
    to:
      kind: Service
      name: customers-service
    tls:
      termination: edge

- apiVersion: apps/v1beta1
  kind: Deployment
  metadata:
    name: customers-portal
    labels:
      app: customers-portal
  spec:
    selector:
      matchLabels:
        app: customers-portal
    replicas: 1
    template:
      metadata:
        labels:
          app: customers-portal
      spec:
        containers:
        - name: portal
          image: dedicated-portal/customers-portal:${VERSION}
          imagePullPolicy: IfNotPresent
          command:
          - /usr/local/bin/customers-webserver

- apiVersion: v1
  kind: Service
  metadata:
    name: customers-portal
    labels:
      app: customers-portal
  spec:
    selector:
      app: customers-portal
    ports:
    - port: 8000
      targetPort: 8000

- apiVersion: v1
  kind: Route
  metadata:
    name: customers-portal
  spec:
    host: customers-portal.${DOMAIN}
    to:
      kind: Service
      name: customers-portal
    tls:
      termination: edge
